"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretsFoundry = exports.parse = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const NEWLINE = '\n';
const RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
const RE_NEWLINES = /\\n/g;
const NEWLINES_MATCH = /\r\n|\n|\r/;
function parse(inputBuffer) {
    let obj = {};
    inputBuffer.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {
        const keyValueArr = line.match(RE_INI_KEY_VAL);
        if (keyValueArr != null) {
            let key = keyValueArr[1];
            let val = (keyValueArr[2] || '');
            let end = val.length - 1;
            let isDoubleQuoted = val[0] === '"' && val[end] === '"';
            let isSingleQuoted = val[0] === "'" && val[end] === "'";
            if (isSingleQuoted || isDoubleQuoted) {
                val = val.substring(1, end);
                if (isDoubleQuoted) {
                    val = val.replace(RE_NEWLINES, NEWLINE);
                }
            }
            else {
                val = val.trim();
            }
            obj[key] = val;
        }
        else {
            console.log(`did not match key and value when parsing line ${idx + 1}: ${line}`);
        }
    });
    return obj;
}
exports.parse = parse;
/**
 * @stability stable
 */
class SecretsFoundry {
    /**
     * @stability stable
     */
    readFile(filePath) {
        return parse(fs.readFileSync(filePath, 'utf8'));
    }
}
exports.SecretsFoundry = SecretsFoundry;
_a = JSII_RTTI_SYMBOL_1;
SecretsFoundry[_a] = { fqn: "secretsfoundry.SecretsFoundry", version: "1.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlCQUF5QjtBQUV6QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUE7QUFDcEIsTUFBTSxjQUFjLEdBQUcsK0JBQStCLENBQUE7QUFDdEQsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFBO0FBQzFCLE1BQU0sY0FBYyxHQUFHLFlBQVksQ0FBQTtBQUNuQyxTQUFnQixLQUFLLENBQUMsV0FBd0I7SUFDMUMsSUFBSSxHQUFHLEdBQStCLEVBQUUsQ0FBQTtJQUN4QyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksRUFBRSxHQUFHO1FBQ3BFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDOUMsSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFO1lBQ3JCLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN4QixJQUFJLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtZQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtZQUN4QixJQUFJLGNBQWMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUE7WUFDdkQsSUFBSSxjQUFjLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFBO1lBQ3ZELElBQUksY0FBYyxJQUFJLGNBQWMsRUFBRTtnQkFDbEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO2dCQUMzQixJQUFJLGNBQWMsRUFBRTtvQkFDaEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFBO2lCQUMxQzthQUNKO2lCQUFNO2dCQUNILEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUE7YUFDbkI7WUFDRCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFBO1NBQ2pCO2FBQU07WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLGlEQUFpRCxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUE7U0FDbkY7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sR0FBRyxDQUFBO0FBQ2QsQ0FBQztBQXhCRCxzQkF3QkM7Ozs7QUFDRCxNQUFhLGNBQWM7Ozs7SUFDaEIsUUFBUSxDQUFDLFFBQWdCO1FBQzVCLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFDbkQsQ0FBQzs7QUFITCx3Q0FJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJylcclxuXHJcbmNvbnN0IE5FV0xJTkUgPSAnXFxuJ1xyXG5jb25zdCBSRV9JTklfS0VZX1ZBTCA9IC9eXFxzKihbXFx3Li1dKylcXHMqPVxccyooLiopP1xccyokL1xyXG5jb25zdCBSRV9ORVdMSU5FUyA9IC9cXFxcbi9nXHJcbmNvbnN0IE5FV0xJTkVTX01BVENIID0gL1xcclxcbnxcXG58XFxyL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaW5wdXRCdWZmZXI6IGZzLlBhdGhMaWtlKSB7XHJcbiAgICBsZXQgb2JqOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfSA9IHt9XHJcbiAgICBpbnB1dEJ1ZmZlci50b1N0cmluZygpLnNwbGl0KE5FV0xJTkVTX01BVENIKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lLCBpZHgpIHtcclxuICAgICAgICBjb25zdCBrZXlWYWx1ZUFyciA9IGxpbmUubWF0Y2goUkVfSU5JX0tFWV9WQUwpXHJcbiAgICAgICAgaWYgKGtleVZhbHVlQXJyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGtleSA9IGtleVZhbHVlQXJyWzFdXHJcbiAgICAgICAgICAgIGxldCB2YWwgPSAoa2V5VmFsdWVBcnJbMl0gfHwgJycpXHJcbiAgICAgICAgICAgIGxldCBlbmQgPSB2YWwubGVuZ3RoIC0gMVxyXG4gICAgICAgICAgICBsZXQgaXNEb3VibGVRdW90ZWQgPSB2YWxbMF0gPT09ICdcIicgJiYgdmFsW2VuZF0gPT09ICdcIidcclxuICAgICAgICAgICAgbGV0IGlzU2luZ2xlUXVvdGVkID0gdmFsWzBdID09PSBcIidcIiAmJiB2YWxbZW5kXSA9PT0gXCInXCJcclxuICAgICAgICAgICAgaWYgKGlzU2luZ2xlUXVvdGVkIHx8IGlzRG91YmxlUXVvdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YWwgPSB2YWwuc3Vic3RyaW5nKDEsIGVuZClcclxuICAgICAgICAgICAgICAgIGlmIChpc0RvdWJsZVF1b3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKFJFX05FV0xJTkVTLCBORVdMSU5FKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsID0gdmFsLnRyaW0oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYGRpZCBub3QgbWF0Y2gga2V5IGFuZCB2YWx1ZSB3aGVuIHBhcnNpbmcgbGluZSAke2lkeCArIDF9OiAke2xpbmV9YClcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBvYmpcclxufVxyXG5leHBvcnQgY2xhc3MgU2VjcmV0c0ZvdW5kcnkge1xyXG4gICAgcHVibGljIHJlYWRGaWxlKGZpbGVQYXRoOiBzdHJpbmcpOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlKGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKSlcclxuICAgIH1cclxufSJdfQ==